#N canvas 1986 111 1436 749 10;
#X obj 155 476 r \$0-attack;
#X obj 274 296 timer;
#X obj 359 229 r \$0-attack;
#X obj 369 258 r \$0-decay;
#X obj 344 286 +;
#X obj 344 257 f;
#X obj 273 222 t b b;
#X obj 275 389 >= 0;
#X obj 275 344 t f f;
#X obj 233 533 f;
#X obj 248 506 r \$0-release;
#X msg 233 566 0 \$1;
#X obj 375 505 f;
#X obj 375 530 pack f f f;
#X obj 432 502 r \$0-release;
#X obj 234 619 vline~;
#X obj 275 418 sel 0 1;
#X msg 375 559 \$1 \$2 \, 0 \$3 \$2;
#X obj 275 321 expr $f2-$f1;
#X obj 428 342 r \$0-decay;
#X obj 403 366 min;
#X obj 441 364 r \$0-release;
#X obj 403 387 min;
#X text 42 300 [attack \, decay \, sustain];
#X text 278 114 [release];
#X obj 35 327 r \$0-velocity;
#X obj 71 533 pack f f f f f;
#X msg 71 558 \$1 \$2 \, \$3 \$4 \$5;
#X obj 120 427 *;
#X obj 62 382 t f f;
#X obj 491 418 r \$0-sustain;
#X obj 467 397 r \$0-velocity;
#X obj 468 444 *;
#X obj 234 639 outlet~;
#X obj 273 139 r \$0-velocity;
#X obj 273 184 sel 1 0;
#X obj 553 80 inlet velocity;
#X obj 647 79 inlet A;
#X obj 696 79 inlet D;
#X obj 746 80 inlet S;
#X obj 795 80 inlet R;
#X obj 112 353 r \$0-attack;
#X obj 135 401 r \$0-sustain;
#X obj 126 452 r \$0-decay;
#X obj 649 165 s \$0-attack;
#X obj 722 165 s \$0-decay;
#X obj 789 164 s \$0-sustain;
#X obj 869 164 s \$0-release;
#X obj 553 165 s \$0-velocity;
#X obj 868 125 unpack \$1 \$2 \$3 \$4;
#X obj 869 104 loadbang;
#X obj 553 132 / 127;
#X obj 553 108 clip 0 127;
#X obj 273 163 > 0;
#X obj 35 351 sel 0;
#X text 591 48 inlets for individual parameters;
#X text 27 63 ---------------------------------------------------------
;
#X text 869 84 creation arguments for ADSR;
#X text 26 10 Finally \, we are ready to add all our pieces together
to make our ADSR envelope generator. We want to make this re-usable
in other patches \, so we add unique values for our sends and receives
with \$0-xxxxxxx;
#X text 569 188 Note that the midi standard is for full velocity to
be 127 \, so that's what we are expecting at our inlet \, and then
we scale by dividing by 127 You can change this so that the patch just
accepts 0->1 scale directly if that is easier for you and you don't
want to follow midi standards.;
#X text 569 266 The attack \, decay and release are all accepting millisecond
values \, as that seems the clearest way \, but again \, if you prefer
to use midi standards \, or scale 0->1 \, then that is an easy modification.
;
#X text 567 327 Sustain here takes a 0->1 value. You can change that
too \, depending on what type of controller you wish to use.;
#X text 668 581 On the next page \, we take all this \, and save at
as a patch called [diy-adsr~] that can be re-used as an abstraction.
We use this envelope to shape the overall volume \, as well as add
countour to the filter [vcf~] object.;
#X connect 0 0 26 4;
#X connect 1 0 18 0;
#X connect 2 0 5 1;
#X connect 3 0 4 1;
#X connect 4 0 18 1;
#X connect 5 0 4 0;
#X connect 6 0 1 0;
#X connect 6 1 5 0;
#X connect 7 0 16 0;
#X connect 8 0 7 0;
#X connect 8 1 20 0;
#X connect 9 0 11 0;
#X connect 10 0 9 1;
#X connect 11 0 15 0;
#X connect 12 0 13 0;
#X connect 13 0 17 0;
#X connect 14 0 13 2;
#X connect 15 0 33 0;
#X connect 16 0 9 0;
#X connect 16 1 12 0;
#X connect 17 0 15 0;
#X connect 18 0 8 0;
#X connect 19 0 20 1;
#X connect 20 0 22 0;
#X connect 21 0 22 1;
#X connect 22 0 13 1;
#X connect 25 0 54 0;
#X connect 26 0 27 0;
#X connect 27 0 15 0;
#X connect 28 0 26 2;
#X connect 29 0 26 0;
#X connect 29 1 28 0;
#X connect 30 0 32 1;
#X connect 31 0 32 0;
#X connect 32 0 12 1;
#X connect 34 0 53 0;
#X connect 35 0 6 0;
#X connect 35 1 1 1;
#X connect 36 0 52 0;
#X connect 37 0 44 0;
#X connect 38 0 45 0;
#X connect 39 0 46 0;
#X connect 40 0 47 0;
#X connect 41 0 26 1;
#X connect 42 0 28 1;
#X connect 43 0 26 3;
#X connect 49 0 44 0;
#X connect 49 1 45 0;
#X connect 49 2 46 0;
#X connect 49 3 47 0;
#X connect 50 0 49 0;
#X connect 51 0 48 0;
#X connect 52 0 51 0;
#X connect 53 0 35 0;
#X connect 54 1 29 0;
